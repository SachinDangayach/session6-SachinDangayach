import pytest
import random
import string
import session6
import os
import inspect
import re
import math
import time
from session6 import prep_deck
from session6 import decide_winner


README_CONTENT_CHECK_FOR = [
    'prep_deck',
    'decide_winner',
    'lambda',
    'map',
    'zip'
]

# Rules for the game.
rule_book = {1: {'ace-hearts','king-hearts','queen-hearts','jack-hearts', '10-hearts'}    # Royal Flush
            ,2: {'10-clubs','9-clubs','8-clubs','7-clubs', '6-clubs'}                     # Straight Flush
            ,3: {'queen-clubs','queen-hearts','queen-spades','queen-diamonds', '5-clubs'} # Four of a Kind
            ,4: {'ace-hearts','ace-spades','ace-diamonds','king-spades', 'king-hearts'}   # Full House
            ,5: {'king-hearts','8-hearts','6-hearts','4-hearts', '2-hearts'}              # Flush
            ,6: {'8-hearts','7-clubs','6-diamonds','5-spades', '4-hearts'}                # Straight
            ,7: {'queen-clubs','queen-hearts','queen-spades','7-hearts', '2-clubs'}       # Three of a Kind
            ,8: {'jack-diamonds','jack-hearts','9-spades','9-diamonds', '5-clubs'}        # Two Pair
            ,9: {'king-hearts','king-spades','9-diamonds','8-spades', '4-hearts'}         # One Pair
            ,10: {'ace-hearts','queen-clubs','6-hearts','4-spades', '2-diamonds'}         # High Card
            }

deck_m = ['10-clubs','10-diamonds', '10-hearts', '10-spades', '2-clubs', '2-diamonds',
          '2-hearts', '2-spades', '3-clubs', '3-diamonds', '3-hearts', '3-spades',
          '4-clubs', '4-diamonds', '4-hearts', '4-spades', '5-clubs', '5-diamonds',
          '5-hearts', '5-spades', '6-clubs', '6-diamonds', '6-hearts', '6-spades',
          '7-clubs', '7-diamonds', '7-hearts', '7-spades', '8-clubs', '8-diamonds',
          '8-hearts', '8-spades', '9-clubs', '9-diamonds', '9-hearts', '9-spades',
          'ace-clubs', 'ace-diamonds', 'ace-hearts', 'ace-spades', 'jack-clubs',
          'jack-diamonds', 'jack-hearts', 'jack-spades', 'king-clubs', 'king-diamonds',
          'king-hearts', 'king-spades', 'queen-clubs', 'queen-diamonds', 'queen-hearts', 'queen-spades']

# Setting up global variables
vals = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'jack', 'queen', 'king', 'ace']
suits = ['spades', 'clubs', 'hearts', 'diamonds']

def test_readme_exists():
    assert os.path.isfile("README.md"), "README.md file missing!"

def test_readme_contents():
    readme = open("README.md", "r", encoding="utf-8")
    readme_words = readme.read().split()
    readme.close()
    assert len(readme_words) >= 500, "Make your README.md file interesting! Add atleast 500 words"

def test_readme_proper_description():
    READMELOOKSGOOD = True
    f = open("README.md", "r", encoding="utf-8")
    content = f.read()
    f.close()
    for c in README_CONTENT_CHECK_FOR:
        if c not in content:
            READMELOOKSGOOD = False
            pass
    assert READMELOOKSGOOD == True, "You have not described all the functions/class well in your README.md file"

def test_readme_file_for_formatting():
    f = open("README.md", "r", encoding="utf-8")
    content = f.read()
    f.close()
    assert content.count("#") >= 10

def test_indentations():
    ''' Returns pass if used four spaces for each level of syntactically \
    significant indenting.'''
    lines = inspect.getsource(session6)
    spaces = re.findall('\n +.', lines)
    for space in spaces:
        assert len(space) % 4 == 2, "Your script contains misplaced indentations"
        assert len(re.sub(r'[^ ]', '', space)) % 4 == 0, "Your code indentation does not follow PEP8 guidelines"

def test_function_name_had_cap_letter():
    functions = inspect.getmembers(session6, inspect.isfunction)
    for function in functions:
        assert len(re.findall('([A-Z])', function[0])) == 0, "You have used Capital letter(s) in your function names"


############################## session6 Validations###########################

def test_deck_by_lambda():
    """Test deck generated by combination of lambda, zip and map is correct
    by comparing it against a manually generated deck"""
    deck_by_lambda = sorted(list(map(lambda x : x[1]+'-'+x[0], zip(suits*len(vals),vals*len(suits)))))
    assert deck_by_lambda == deck_m, "Deck generated by lambda function is not correct"

# TODO: Test prep_deck
def test_prep_deck_output():
    """Test deck generated by prep_deck
    by comparing it against a manually generated deck"""
    deck_by_func = session6.prep_deck()
    assert deck_by_func == deck_m, "Deck generated by function is not correct"

def test_prep_deck_input_values():
    """Throw error if incorrect list of values passed"""
    value_e = ['king','queen']
    suits_e = ['hearts', 'diamonds','gold','silver']
    with pytest.raises(ValueError, match=r".*Incorrect list of faces of cards'*"):
        session6.prep_deck(value_e,suits)
    with pytest.raises(ValueError, match=r".*Incorrect list of suits of cards'*"):
        session6.prep_deck(vals,suits_e)

def test_prep_deck_doc_string():
     """ Throw error in case doc string is missing"""
     assert session6.prep_deck.__doc__, "doc string is missing for prep_deck function"

# TODO: Test decide_winner
def test_decide_winner_doc_string():
     """ Throw error in case doc string is missing"""
     assert session6.decide_winner.__doc__, "doc string is missing for decide_winner function"

def test_decide_winner_annotations():
     """ Throw error in case annotation is missing"""
     assert session6.decide_winner.__annotations__, "Annotations missing for decide_winner function"

def test_decide_winner_incorrect_players_cards():
    """ Check for the valid cards are provided by players"""
    with pytest.raises(ValueError, match=r".*Player 1 cards are not valid'*"):
        p1_cards = ['ace-hearts','king-blacks','queen-hearts'] # 'king-blacks' is incrrect
        p2_cards = ['5-hearts', '5-spades', '6-clubs']
        session6.decide_winner(p1_cards,p2_cards)
    with pytest.raises(ValueError, match=r".*Player 2 cards are not valid'*"):
        p1_cards = ['ace-hearts','queen-hearts']
        p2_cards = ['5-hearts', '5-spades', '6-blacks'] # '6-blacks' is incrrect
        session6.decide_winner(p1_cards,p2_cards)

def test_decide_winner_only_one_deck():
    """ Check for the cards from both players are from same deck and hence
    there can't be any repetition of cards"""
    with pytest.raises(ValueError, match=r".*Both sets of cards are not from same deck'*"):
        p1_cards = ['ace-hearts','5-spades','queen-hearts']
        p2_cards = ['5-hearts', '5-spades', '6-clubs'] # '5-spades' is repetited
        session6.decide_winner(p1_cards,p2_cards)

def test_decide_winner_number_of_cards():
    """ Check for the cards from both players are more than 2 and less than 6"""
    with pytest.raises(ValueError, match=r".*Only sets of 3 or 4 or 5 cards allowed'*"):
        p1_cards = ['ace-hearts','5-spades'] #  less than 3 cards
        p2_cards = ['5-hearts', '6-spades'] #  less than 3 cards
        session6.decide_winner(p1_cards,p2_cards)
    with pytest.raises(ValueError, match=r".*Only sets of 3 or 4 or 5 cards allowed'*"):
        p1_cards = ['ace-hearts','king-hearts','8-hearts','6-hearts','4-hearts', '3-hearts'] # more than 5 cards
        p2_cards = ['9-hearts','7-clubs','6-diamonds','5-spades', '2-hearts', '6-clubs'] # more than 5 cards
        session6.decide_winner(p1_cards,p2_cards)

def test_decide_winner_same_cards_by_player():
    """ Check for a player can't use same cards multiple times in one game"""
    with pytest.raises(ValueError, match=r".*using same card multiple times'*"):
        p1_cards = ['ace-hearts','5-spades', '7-spades','5-spades'] #  same card '5-spades'
        p2_cards = ['5-hearts', '6-spades','8-spades','king-hearts']
        session6.decide_winner(p1_cards,p2_cards)
    with pytest.raises(ValueError, match=r".*using same card multiple times'*"):
        p1_cards = ['5-hearts', '6-spades', '7-spades','king-hearts']
        p2_cards = ['ace-hearts','5-spades','8-spades', '5-spades'] #  same card '5-spades'
        session6.decide_winner(p1_cards,p2_cards)

def test_decide_winner_same_num_of_cards_by_players():
    """ Check for both player are using same number of cards in one game"""
    with pytest.raises(ValueError, match=r".*Both players should use same number of cards'*"):
        p1_cards = ['ace-hearts','5-spades', '7-spades']
        p2_cards = ['5-hearts', '6-spades','8-spades','king-hearts']
        session6.decide_winner(p1_cards,p2_cards)
    with pytest.raises(ValueError, match=r".*Both players should use same number of cards'*"):
        p1_cards = ['5-hearts', '6-spades', '7-spades','king-hearts']
        p2_cards = ['ace-hearts','5-spades','8-spades']
        session6.decide_winner(p1_cards,p2_cards)

def test_decide_winner_3cards_each():
    """Check for the winner and show the winner, 3 cards as input"""
    # 10 cases
    p1_cards = ['ace-hearts','king-hearts','queen-hearts']
    p2_cards = ['6-hearts','4-spades', '2-diamonds']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['king-hearts','queen-hearts','jack-hearts']
    p2_cards = ['ace-hearts','queen-clubs','6-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['queen-hearts','jack-hearts', '10-hearts']
    p2_cards = ['ace-hearts','queen-clubs','6-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['10-clubs','9-clubs','8-clubs']
    p2_cards = ['ace-hearts','queen-clubs','6-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['9-clubs','8-clubs','7-clubs']
    p2_cards = ['ace-hearts','queen-clubs','6-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['8-clubs','7-clubs', '6-clubs']
    p2_cards = ['ace-hearts','4-spades','6-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['queen-clubs','queen-hearts','queen-spades']
    p2_cards = ['ace-hearts','4-spades','6-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['queen-hearts','queen-spades','queen-diamonds']
    p2_cards = ['ace-hearts','4-spades','6-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['queen-spades','queen-diamonds', '5-clubs']
    p2_cards = ['ace-hearts','4-spades','6-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['king-hearts','8-hearts','6-hearts']
    p2_cards = ['9-diamonds','8-spades', '4-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

def test_decide_winner_4cards_each():
    """Check for the winner and show the winner, 3 cards as input"""
    # 10 cases
    p1_cards = ['ace-hearts','king-hearts','queen-hearts','jack-hearts']
    p2_cards = ['queen-clubs','6-hearts','4-spades', '2-diamonds']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['10-clubs','9-clubs','8-clubs','7-clubs']
    p2_cards = ['queen-clubs','6-hearts','4-spades', '2-diamonds']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['queen-clubs','queen-hearts','queen-spades','queen-diamonds']
    p2_cards = ['king-hearts','king-spades','9-diamonds','8-spades']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['king-hearts','queen-hearts','jack-hearts', '10-hearts']
    p2_cards = ['9-clubs','8-clubs','7-clubs', '6-clubs']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['10-clubs','9-clubs','8-clubs','7-clubs']
    p2_cards = ['queen-clubs','6-hearts','4-spades', '2-diamonds']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['8-hearts','7-clubs','6-diamonds','5-spades']
    p2_cards = ['queen-clubs','6-hearts','4-spades', '2-diamonds']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['queen-clubs','queen-hearts','queen-spades','7-hearts']
    p2_cards = ['king-spades','9-diamonds','8-spades', '4-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['jack-diamonds','jack-hearts','9-spades','9-diamonds']
    p2_cards = ['queen-clubs','6-hearts','4-spades', '2-diamonds']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['queen-clubs','6-hearts','4-spades', '2-diamonds']
    p2_cards = ['king-hearts','king-spades','9-diamonds','8-spades']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 2', "This player is not winner"

    p1_cards = ['queen-clubs','6-hearts','4-spades', '2-diamonds']
    p2_cards = ['queen-hearts','queen-spades','7-hearts', '2-clubs']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 2', "This player is not winner"

def test_decide_winner_5cards_each():
    """Check for the winner and show the winner"""
    # 5 cases
    p1_cards = ['ace-hearts','king-hearts','queen-hearts','jack-hearts', '10-hearts']
    p2_cards = ['10-clubs','9-clubs','8-clubs','7-clubs', '6-clubs']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['10-clubs','9-clubs','8-clubs','7-clubs', '6-clubs']
    p2_cards = ['queen-clubs','queen-hearts','queen-spades','queen-diamonds', '5-clubs']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['ace-hearts','ace-spades','ace-diamonds','king-spades', 'king-hearts']
    p2_cards = ['8-hearts','7-clubs','6-diamonds','5-spades', '4-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 1', "This player is not winner"

    p1_cards = ['ace-hearts','queen-clubs','6-hearts','4-spades', '2-diamonds']
    p2_cards = ['10-clubs','9-clubs','8-clubs','7-clubs', '6-clubs']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 2', "This player is not winner"

    p1_cards = ['10-clubs','9-clubs','8-clubs','7-clubs', '6-clubs']
    p2_cards = ['ace-hearts','king-hearts','queen-hearts','jack-hearts', '10-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'Player 2', "This player is not winner"

def test_decide_winner_no_one_wins():
    """Check for none of the player won"""
    p1_cards = ['ace-hearts','6-spades', '7-spades']
    p2_cards = ['5-hearts', '3-spades','king-hearts']
    assert session6.decide_winner(p1_cards,p2_cards) == 'None', 'None of the player won'

def test_decide_winner_no_one_wins():
    """Check for only one player won"""
    p1_cards = ['8-hearts','7-clubs','6-diamonds']
    p2_cards = ['queen-clubs','7-hearts','2-diamonds']
    assert session6.decide_winner(p1_cards,p2_cards) == "Player 1 won, Player 2 cards didn't match the cards", 'Incorrect result'
